1. Strategy Pattern: defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm
    vary independently from clients that use it.
2. Observer Pattern: defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are
	notified and updated automatically.
3. Decorator Pattern: attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to
    subclassing for extending functionality.
4.1. Factory Method Pattern: defines an interface for creating and object, but lets subclasses decide which class to instantiate.
    Factory Method lets a class defer instantiation to subclasses.
4.2. Abstract Factory Pattern: provides an interface for creating families of related or dependent objects without specifying
    their concrete classes.
5. Singleton Pattern: ensures a class has only one instance, and provides a global point of access to it.
6. Command Pattern: encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue
    or log requests, and support undoable operations.
7. Adapter Pattern: converts the interface of a class into another interface the clients expect. Adapter lets classes work together
    that couldn't otherwise because of incompatible interfaces.
8. Facade Pattern: provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface
    that makes the subsystem easier to use.
9. Template Pattern: defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets
    subclasses redefine certain steps of an algorithm without changing the algorithm's structure.
10. Iterator Pattern: provides a way to access the elements of an aggregate object sequentially without exposing its
    underlying representation.
11. Composite Pattern: allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients
    treat individual objects and compositions of objects uniformly.
