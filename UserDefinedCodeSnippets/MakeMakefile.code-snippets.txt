{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "Make Makefile with basic directory system": {
        "scope": "makefile",
        "prefix": "make makefile",
        "body": [
            "name = app",
            "compile_flags = -Wall -Wextra -Werror -std=c++17",
            "link_flags =",
            "compiler = clang++",
            "pwd = $(shell pwd)",
            "header_directory = $(pwd)/headers",
            "source_directory = $(pwd)/sources",
            "object_directory = $(pwd)/objects",
            "source_files = $(foreach file,$(shell find sources -type f -not -name \"*.h\" -not -name \".gitkeep\"),$(pwd)/$(file))",
            "object_files = $(subst $(source_directory),$(object_directory),$(source_files:.cpp=.o))",
            "header_files = $(foreach file,$(shell find headers -type f),$(pwd)/$(file))",
            "",
            "$(name): $(object_files) | $(source_directory) $(header_directory) $(object_directory)",
            "",
            "$(name): $(subst $(source_directory),$(object_directory),$(source_files:.cpp=.o)) | $(source_directory) $(header_directory) $(object_directory)",
            "    $(compiler) $(link_flags) -o $@ $^",
            "",
            "$(object_directory)/main.o: $(source_directory)/main.cpp $(header_files) | $(object_directory)",
            "    cd $(dir $@) && $(compiler) $(compile_flags) -I$(header_directory) -c $<",
            "",
            "# each .hpp file needs to reside in the same directory structure as 'sources' except 'sources' replaced with 'headers'",
            ".SECONDEXPANSION:",
            "%.o: $$(subst $(object_directory),$(source_directory),$$(subst .o,.cpp,$$@)) $$(subst $(object_directory),$(header_directory),$$(subst .o,.hpp,$$@)) | $(object_directory)",
            "    cd $(dir $@) && $(compiler) $(compile_flags) -I$(header_directory) -c $<",
            "",
            "# rule for .cpp files that don't have header dependencies",
            ".SECONDEXPANSION:",
            "%.o: $$(subst $(object_directory),$(source_directory),$$(subst .o,.cpp,$$@)) | $(object_directory)",
            "    cd $(dir $@) && $(compiler) $(compile_flags) -I$(header_directory) -I$(GLEW)/include -I$(GLFW)/include -c $<",
            "",
            "$(object_directory):",
            "    mkdir $@ && cd $@ && touch .gitkeep",
            "$(source_directory):",
            "    mkdir $@ && cd $@ && touch .gitkeep",
            "$(header_directory):",
            "    mkdir $@ && cd $@ && touch .gitkeep",
            "",
            ".PHONY: all clean re fclean",
            "all:",
            "    make $(name)",
            "clean:",
            "    find $(object_directory) -name \"*.o\" -delete",
            "fclean: clean",
            "    rm -f $(name)",
            "re: fclean",
            "    make $(name)",
            ""
        ],
        "description": "Sets up basic directory system for a project and creates its makefile"
    }
}
